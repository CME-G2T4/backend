# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the main branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: aws ecr create-repository --repository-name my-ecr-repo --region us-east-2.
#    Replace the value of the ECR_REPOSITORY environment variable in the workflow below with your repository's name.
#    Replace the value of the AWS_REGION environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the ECS_SERVICE environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the ECS_CLUSTER environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of aws ecs register-task-definition --generate-cli-skeleton.
#    Replace the value of the ECS_TASK_DEFINITION environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the CONTAINER_NAME environment variable in the workflow below with the name of the container
#    in the containerDefinitions section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-southeast-1
  ECS_CLUSTER: G1T3Backend

  #Define BookingService Environment Variables
  BOOKING_ECR_REPOSITORY: bookingservice
  BOOKING_ECS_SERVICE: BookingService
  BOOKING_ECS_TASK_DEFINITION: Microservices/Booking/task-def.json
  BOOKING_CONTAINER_NAME: BookingService
  BOOKING_DOCKERFILE_PATH: ./Microservices/Booking/         
  
  # Define HotelService Environment Variables
  HOTEL_ECR_REPOSITORY: hotelservice
  HOTEL_ECS_SERVICE: HotelBackendService
  HOTEL_ECS_TASK_DEFINITION: Microservices/Hotel/task-def.json
  HOTEL_CONTAINER_NAME: HotelService
  HOTEL_DOCKERFILE_PATH: ./Microservices/Hotel/
  
  # Define HotelService Environment Variables
  PAYMENT_ECR_REPOSITORY: paymentservice
  PAYMENT_ECS_SERVICE: PaymentService
  PAYMENT_ECS_TASK_DEFINITION: Microservices/Payment/task-def.json
  PAYMENT_CONTAINER_NAME: PaymentService
  PAYMENT_DOCKERFILE_PATH: ./Microservices/Payment/
  
  # Define HotelService Environment Variables
  CONTROLLER_ECR_REPOSITORY: controllerservice
  CONTROLLER_ECS_SERVICE: ControllerService
  CONTROLLER_ECS_TASK_DEFINITION: Microservices/Controller/task-def.json
  CONTROLLER_CONTAINER_NAME: ControllerService
  CONTROLLER_DOCKERFILE_PATH: ./Microservices/Controller/

jobs:
  deploy-booking:
    name: Deploy Booking

    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v2
    
    # Inject environment variable for Task Definition
    - name: Update Task Definitions
      run : |
          sed -i "s|<db_url>|$DB_URL|g" Microservices/Booking/task-def.json
      env:
        DB_URL: ${{secrets.DB_URL}}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$BOOKING_ECR_REPOSITORY:$IMAGE_TAG $BOOKING_DOCKERFILE_PATH
        docker push $ECR_REGISTRY/$BOOKING_ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$BOOKING_ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.BOOKING_ECS_TASK_DEFINITION }}
        container-name: ${{ env.BOOKING_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.BOOKING_ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
  
  deploy-hotel:
    name: Deploy Hotel

    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v2
    
    # Inject environment variable for Task Definitions
    - name: Update Task Definitions
      run: |
        sed -i "s|<redis_url>|$REDIS_URL|g" Microservices/Hotel/task-def.json
        sed -i "s|<mock_supplier_url>|$MOCK_SUPPLIER_URL|g" Microservices/Hotel/task-def.json
      env:
        REDIS_URL: ${{secrets.REDIS_URL}}
        MOCK_SUPPLIER_URL: ${{secrets.MOCK_SUPPLIER_URL}}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$HOTEL_ECR_REPOSITORY:$IMAGE_TAG $HOTEL_DOCKERFILE_PATH
        docker push $ECR_REGISTRY/$HOTEL_ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$HOTEL_ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.HOTEL_ECS_TASK_DEFINITION }}
        container-name: ${{ env.HOTEL_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.HOTEL_ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
  
  deploy-payment:
    name: Deploy Hotel

    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$PAYMENT_ECR_REPOSITORY:$IMAGE_TAG $PAYMENT_DOCKERFILE_PATH
        docker push $ECR_REGISTRY/$PAYMENT_ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$PAYMENT_ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.PAYMENT_ECS_TASK_DEFINITION }}
        container-name: ${{ env.PAYMENT_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.PAYMENT_ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
  
  deploy-controller:
    name: Deploy Hotel

    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v2
    
    # Inject environment variable for Task Definitions
    - name: Update Task Definitions
      run: |
        sed -i "s|<booking_url>|$BOOKING_URL|g" Microservices/Controller/task-def.json
        sed -i "s|<payment_url>|$PAYMENT_URL|g" Microservices/Controller/task-def.json
      env:
        BOOKING_URL: ${{secrets.BOOKING_URL}}
        PAYMENT_URL: ${{secrets.PAYMENT_URL}}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$CONTROLLER_ECR_REPOSITORY:$IMAGE_TAG $CONTROLLER_DOCKERFILE_PATH
        docker push $ECR_REGISTRY/$CONTROLLER_ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$CONTROLLER_ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.CONTROLLER_ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTROLLER_CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.CONTROLLER_ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true